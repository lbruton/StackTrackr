# Application Structure

This document outlines the structure of the StackTrackr application. It provides an overview of the folders and files, their purposes, and how they interconnect. This document should be updated whenever the folder structure changes.

## Root Directory
- **agents/**: Contains AI-related workflows, fallback mechanisms, and task-specific files.
  - **claude.ai**: Claude-specific workflows.
  - **gemini.ai**: Gemini-specific workflows.
  - **gpt.ai**: GPT-specific workflows.
  - **fallback/**: Fallback workflows for agents.
    - **AgentsFallback.ai**: General fallback logic.
    - **ClaudeFallback.ai**: Claude-specific fallback logic.
    - **GeminiFallback.ai**: Gemini-specific fallback logic.
    - **GPTFallback.ai**: GPT-specific fallback logic.
  - **fixes/**: Contains documentation for fixes applied to the application.
  - **patch/**: Contains patch files for updates and hotfixes.
  - **scripts/**: Scripts for testing and updating templates.
  - **tasks/**: Task-specific files for agents.

- **archive/**: Contains archived files and previous versions.

- **css/**: Contains stylesheets for the application.

- **docs/**: Documentation for the application, including guides, roadmaps, and changelogs.

- **images/**: Contains image assets like logos and icons.

- **js/**: Core JavaScript files for the application.
  - **about.js**: About page logic.
  - **api.js**: API integration logic.
  - **autocomplete.js**: Autocomplete functionality.
  - **catalog-manager.js**: Catalog management logic.
  - **catalog-providers.js**: Catalog provider integration.
  - **changeLog.js**: Changelog management.
  - **charts.js**: Chart rendering logic.
  - **constants.js**: Application constants.
  - **customMapping.js**: Custom mapping logic.
  - **debug-log.js**: Debugging utilities.
  - **detailsModal.js**: Modal management logic.
  - **events.js**: Event handling logic.
  - **file-protocol-fix.js**: Fixes for file protocol issues.
  - **filters.js**: Filtering logic.
  - **fuzzy-search.js**: Fuzzy search implementation.
  - **init.js**: Application initialization.
  - **inventory.js**: Inventory management logic.
  - **numista-modal.js**: Numista modal integration.
  - **pagination.js**: Pagination logic.
  - **search.js**: Search functionality.
  - **sorting.js**: Sorting logic.
  - **spot.js**: Spot price management.
  - **state.js**: Global state management.
  - **theme.js**: Theme management.
  - **utils.js**: Utility functions.
  - **versionCheck.js**: Version checking logic.

- **snapshots/**: Contains snapshots of the application state.

## Notes
- This document must be updated whenever a folder is moved, renamed, or created.
- Ensure all references in the application are updated accordingly.
