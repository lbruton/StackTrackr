# StackTrackr Agent Trigger Phrases & Workflow References
**Version**: 2.0  
**Created**: August 13, 2025  
**Location**: `/docs/agents/references.ai`

---

## ðŸŽ¯ **PRIMARY WORKFLOW TRIGGERS**

### **Task Management**
```
"Create a multi-agent task for [TASK_NAME]"
```
â†’ Generates complete task delegation system with individual agent assignments, coordination documents, and progress tracking

```
"Review current task progress"
```
â†’ Reads checklist.md and provides comprehensive status update on all active tasks

```
"Assign task [PHASE] to [AGENT]"
```
â†’ Extracts specific assignment prompt for immediate delegation to GPT/Gemini/Claude

---

## ðŸ”§ **DEVELOPMENT WORKFLOW TRIGGERS**

### **Performance & Quality**
```
"Optimize performance for [FEATURE/MODULE]"
```
â†’ Analyzes bottlenecks and creates performance improvement tasks with agent assignments

```
"Refactor [MODULE] for maintainability"
```
â†’ Creates architectural improvement plan with complexity-based agent delegation

```
"Security audit [FEATURE]"
```
â†’ Generates security review checklist and assigns to appropriate agent (typically Gemini)

### **Feature Development**
```
"Plan new feature: [FEATURE_NAME]"
```
â†’ Creates feature implementation roadmap with phases and agent assignments

```
"Add [COMPONENT_TYPE] to StackTrackr"
```
â†’ Generates component implementation plan (e.g., "Add modal component", "Add data visualization")

```
"Migrate [CURRENT] to [TARGET]"
```
â†’ Creates migration strategy (e.g., "Migrate jQuery to vanilla JS", "Migrate to TypeScript")

### **Bug Management**
```
"Debug issue: [DESCRIPTION]"
```
â†’ Creates systematic debugging approach with testing phases and agent coordination

```
"Fix regression in [FEATURE]"
```
â†’ Generates rollback analysis and targeted fix strategy with validation steps

```
"Validate fix for [ISSUE]"
```
â†’ Creates comprehensive testing protocol for specific issue verification

---

## ðŸš€ **STACKTRACKR-SPECIFIC TRIGGERS**

### **Inventory Management**
```
"Optimize inventory table performance"
```
â†’ Focus on large dataset handling, rendering improvements, and memory optimization

```
"Enhance search functionality"
```
â†’ Targets search UX, performance improvements, and filtering capabilities

```
"Improve data import/export"
```
â†’ Streamlines CSV/JSON/Numista data handling with validation and error handling

### **API & Integration**
```
"Optimize spot price fetching"
```
â†’ Improves API performance, caching strategies, and rate limiting

```
"Add new metals API provider"
```
â†’ Creates provider integration workflow with testing and validation

```
"Enhance backup/restore system"
```
â†’ Improves data persistence, recovery mechanisms, and data integrity

### **UI/UX Improvements**
```
"Modernize UI components"
```
â†’ Creates component upgrade and styling tasks with accessibility considerations

