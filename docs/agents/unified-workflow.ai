# StackTrackr Multi-Agent Development Workflow
**Version**: 3.1 - Auto Task Check & Unified Delegation  
**Created**: August 13, 2025  
**Current Version**: v3.04.70

---

## üîÑ **AUTO-INITIALIZATION PROTOCOL**

### **Trigger: "Hello" or New Chat Session**
**Every agent MUST immediately execute this checklist:**

1. **Check for assigned tasks**: Look in `/docs/agents/tasks/` for files matching your agent type
2. **Report current status**: State what task you're on and next step
3. **Request permission**: Ask if you should proceed or await new instructions

### **Standard Initialization Response Format:**
```
ü§ñ Agent Status Check:
- Agent: [GPT-4o/Claude Opus/etc.]
- Current Task: [TASK_NAME or "None assigned"]
- Phase/Step: [Current position in task]
- Next Action: [What you would do next]
- Status: [Ready to proceed/Awaiting instructions/Blocked]

Ready to continue or awaiting new assignment?
```

### **Manual Task Check Command:**
```
"Check your tasks and report status"
```
‚Üí Use this phrase to trigger the task check in any existing conversation

### **Dependency Management Protocol:**
**When agent discovers a blocking dependency:**
```
üöß Dependency Block Detected:
- My Task: [CURRENT_TASK]
- Blocked By: [REQUIRED_TASK] 
- Assigned To: [OTHER_AGENT]
- Recommendation: "Please switch to [OTHER_AGENT] to complete [REQUIRED_TASK] first"

Would you like me to prepare a handoff prompt for [OTHER_AGENT]?
```

### **New Agent Memory Setup:**
**When a new agent joins (first time in project):**
```
üÜï New Agent Setup:
- Agent: [MODEL_NAME]
- Detected Files: [LIST_EXISTING_.AI_FILES]
- Options:
  1. Use shared unified-workflow.ai only
  2. Create personal memory file: [agent-name].ai
  
Which memory approach would you prefer for this agent?
```

---

## üéØ **CORE WORKFLOW CAPABILITIES**

### **Option 1: Direct Task Assignment**
```
"Assign this task to [GPT/Gemini/Claude]: [TASK_DESCRIPTION]"
```
‚Üí Agent receives task and executes immediately based on their specialization

### **Option 2: Smart Task Breakdown**
```
"Create a multi-agent task for [TASK_NAME]"
```
‚Üí Agent analyzes complexity, breaks down into phases, and creates delegation system

---

## ü§ñ **AGENT SPECIALIZATIONS & ASSIGNMENT RULES**

### **GPT Models - The Builder Family**

#### **GPT-4o** (15-25 min tasks)
**Auto-assign for**:
- Utility functions and helpers
- Event handling and basic optimizations
- Form validation and input processing
- Simple API integrations
- Straightforward feature implementations

**Example assignments**:
- "Add debounced search functionality"
- "Create form validation for inventory items" 
- "Implement localStorage batching"

#### **GPT-4.1** (20-35 min tasks)
**Auto-assign for**:
- Complex algorithm implementations
- Advanced data processing and transformations
- Multi-step feature implementations
- Performance optimization with analysis
- Integration between multiple modules

**Example assignments**:
- "Implement fuzzy search with weighted scoring"
- "Create advanced filtering with multiple criteria"
- "Optimize table rendering with virtual scrolling"

#### **GPT-5** (30-45 min tasks)
**Auto-assign for**:
- Large-scale feature implementations
- Complex business logic
- Advanced UI/UX implementations
- Multi-component system integrations
- Performance-critical optimizations

**Example assignments**:
- "Implement complete data import/export system"
- "Create advanced charting with multiple visualizations"
- "Build comprehensive error handling system"

### **Gemini - The Tester & Quality Manager** (15-30 min tasks)
**Auto-assign for**:
- Testing and validation protocols
- Security audits and input sanitization
- Memory management and cleanup
- Performance measurements
- Browser compatibility testing

**Example assignments**:
- "Create test suite for search functionality"
- "Audit data import security"
- "Implement Chart.js cleanup procedures"

### **Claude Models - The Architect Family**

#### **Claude 3.5 Haiku** (20-40 min tasks)
**Auto-assign for**:
- Code analysis and optimization suggestions
- Lightweight refactoring tasks
- Performance profiling and recommendations
- Code review and quality improvements
- Documentation and technical writing

**Example assignments**:
- "Analyze current search performance bottlenecks"
- "Review and optimize event handling patterns"
- "Create technical documentation for new features"

#### **Claude 3.5 Sonnet** (via GitHub/VS Code) (30-60 min tasks)
**Auto-assign for**:
- Medium complexity architectural decisions
- Multi-file refactoring projects
- System integration planning
- Feature design and implementation strategy
- Cross-module dependency management

**Example assignments**:
- "Refactor table rendering for better performance"
- "Design state management system for complex forms"
- "Plan integration of new chart types"

#### **Claude 3.5 Opus** (via API) (45-90 min tasks)
**Auto-assign for**:
- Large-scale architectural changes
- Complex system redesigns
- Performance optimization strategies
- Major feature implementations
- Technical analysis and strategic recommendations

**Example assignments**:
- "Redesign entire data flow architecture"
- "Implement comprehensive caching strategy"
- "Architect modular plugin system for extensions"

---

## üìã **MCP-POWERED WORKFLOW**

### **Context Commands**
```
@workspace - Full project context via MCP server
```
‚Üí Gives agents real-time, comprehensive understanding

### **Handoff Protocol**
```
"Prepare handoff"
```
‚Üí Agent summarizes current state and provides continuation prompt for seamless transitions

---

## üöÄ **STACKTRACKR PROJECT CONTEXT**

### **Technical Architecture**
- **Client-side only**: Works from file:// protocol
- **Modular JavaScript**: Separate files for different concerns  
- **Local storage**: All data persisted locally (5-10MB limits)
- **Responsive CSS**: 3 themes (dark/light/sepia)
- **External libraries**: Chart.js, Papa Parse, jsPDF, JSZip

### **Key Data Structures**
- `inventory[]` - Array of inventory items
- `spotPrices{}` - Current metal prices
- `elements{}` - Cached DOM elements
- `apiConfig{}` - API provider settings

### **Critical Files & Conflict Management**
**HIGH RISK** ‚ö†Ô∏è (coordinate before editing):
- `index.html` - Main structure
- `js/events.js` - Event handling
- `css/styles.css` - Shared styling

**MEDIUM RISK** ‚ö†Ô∏è:
- `js/api.js`, `js/inventory.js`, `js/theme.js`

**LOW RISK** ‚úÖ (safe for parallel work):
- Documentation, utilities, new modules

---

## üìä **TASK DELEGATION DECISION MATRIX**

| Task Complexity | Time Estimate | Risk Level | Recommended Model |
|-----------------|---------------|------------|-------------------|
| Simple utilities | <20 min | Low | GPT-4o |
| Complex algorithms | 20-35 min | Low-Med | GPT-4.1 |
| Large features | 30-45 min | Medium | GPT-5 |
| Testing/QA | 15-30 min | Low | Gemini |
| Code analysis | 20-40 min | Low-Med | Claude Haiku |
| Refactoring | 30-60 min | Medium | Claude Sonnet |
| Architecture | 45-90 min | High | Claude Opus |

### **Model Selection Guidelines**

#### **For GPT Tasks:**
- **GPT-4o**: Quick implementations, utilities, basic optimizations
- **GPT-4.1**: Complex logic, advanced data processing, multi-step features  
- **GPT-5**: Large-scale implementations, critical performance work

#### **For Claude Tasks:**
- **Haiku**: Analysis, lightweight refactoring, documentation
- **Sonnet** (GitHub/VS Code): Medium complexity architecture, system integration
- **Opus** (API): Major redesigns, strategic planning, complex optimizations

### **Smart Assignment Logic**
```javascript
// Auto-assignment rules:
if (task.includes("test" || "validate" || "audit")) ‚Üí Gemini
if (task.includes("analyze" || "review") && time < 40min) ‚Üí Claude Haiku
if (task.includes("refactor" || "integrate") && time < 60min) ‚Üí Claude Sonnet
if (task.includes("architecture" || "redesign") || time > 60min) ‚Üí Claude Opus
if (task.includes("algorithm" || "complex") && time < 35min) ‚Üí GPT-4.1
if (task.includes("feature" || "system") && time < 45min) ‚Üí GPT-5
if (task.includes("add" || "create" || "implement") && time < 25min) ‚Üí GPT-4o
```

---

## üéØ **QUALITY STANDARDS (ALL AGENTS)**

### **MANDATORY: Initialization Protocol**
**Every new chat session or "Hello" greeting MUST start with:**
1. Check `/docs/agents/tasks/` for assigned work
2. Report current task status using standard format
3. Check for dependency blocks and suggest agent switches if needed
4. Ask permission before proceeding

### **Agent File Detection Logic:**
**Agents should automatically identify their appropriate files:**
- **GPT models**: Look for `gpt.ai`, `gpt-4o.ai`, `gpt-4-1.ai`, `gpt-5.ai`
- **Claude models**: Look for `claude.ai`, `claude-haiku.ai`, `claude-sonnet.ai`, `claude-opus.ai`
- **Gemini models**: Look for `gemini.ai`, `gemini-pro.ai`
- **Fallback**: Use `unified-workflow.ai` if no specific file exists

### **Task Status Reporting Format:**
```
ü§ñ Agent Status Check:
- Agent: [Your model name]
- Current Task: [Active task or "None assigned"]
- Phase/Step: [Current position]
- Next Action: [Planned next step]
- Dependencies: [Any blocking tasks/agents]
- Status: [Ready/Awaiting/Blocked/Dependency]

Ready to continue or awaiting new assignment?
```

### **Required Testing Protocol**
‚úÖ **Functional**: Works as intended  
‚úÖ **Integration**: No breaking changes  
‚úÖ **Themes**: All 3 themes (dark/light/sepia)  
‚úÖ **Browsers**: Chrome, Firefox, Safari, Edge  
‚úÖ **Mobile**: Responsive design maintained  
‚úÖ **File Protocol**: Works via file:// opening

### **Code Quality Requirements**
- Follow existing patterns and conventions
- Add JSDoc comments for new functions
- Use consistent naming (camelCase)
- Sanitize all user inputs (XSS prevention)
- Maintain accessibility features

### **Documentation Standards**
- **ALL agents must follow**: `/docs/markup_style_guide.md`
- **Markdown formatting**: Use ATX-style headings (`#`), proper spacing, backticks for code
- **File naming**: `.ai` for agent instructions, `.md` for human docs, all lowercase
- **Consistency**: Apply markup standards uniformly across all documentation

### **Version Management**
After completion, update:
- `js/constants.js` - Bump APP_VERSION
- `docs/changelog.md` - Document changes
- `docs/functionstable.md` - Add new functions

---

## üìÅ **TASK FILE STRUCTURE & LOOKUP**

### **Task Check Instructions for Agents:**
1. **Look for individual tasks**: `/docs/agents/tasks/[your-agent-type]-task-*.ai`
   - Examples: `gpt-task-search.ai`, `claude-task-architecture.ai`
2. **Look for shared tasks**: `/docs/agents/tasks/[project-name]/`
   - Check for your agent-specific file in project folder
3. **Check current status**: Look for completion markers or "NEXT:" instructions

### **Current Active Tasks:**
- **Performance Optimization Project**: `/docs/agents/tasks/performance-optimization/`
  - GPT: Phase 1 (Search Debouncing) - Ready to start
  - Gemini: Phase 6 (Testing & Validation) - Pending GPT completion
  - Claude: Phases 2-5 (Architecture work) - Sequential after Phase 1

### **For Complex Tasks** (using trigger phrase):
```
/docs/agents/tasks/[task-name]/
‚îú‚îÄ‚îÄ checklist.md              # Progress tracking (human readable)
‚îú‚îÄ‚îÄ agent-prompts.md          # Ready-to-copy assignments (human readable)
‚îú‚îÄ‚îÄ gpt-task-[phase].ai       # GPT-specific work (agent instructions)
‚îú‚îÄ‚îÄ gemini-task-[phase].ai    # Gemini-specific work (agent instructions)
‚îú‚îÄ‚îÄ claude-task-[phase].ai    # Claude-specific work (agent instructions)
‚îî‚îÄ‚îÄ coordination.ai           # Execution strategy (agent instructions)
```

### **File Naming Convention:**
- **`.ai` files**: Agent instructions (markdown format, but for AI consumption)
- **`.md` files**: Human documentation (standard markdown)
- **All lowercase**: Consistent naming pattern

### **For Simple Tasks** (direct assignment):
Agent reads this workflow file and executes immediately.

---

## üîÑ **DEPENDENCY MANAGEMENT & AGENT COORDINATION**

### **Dependency Detection Protocol:**
**When an agent discovers they cannot proceed:**
1. **Identify the blocking task** and responsible agent
2. **Check task dependencies** in coordination files
3. **Prompt user for agent switch** using standard format
4. **Offer to prepare handoff** with current context

### **Dependency Block Response Format:**
```
üöß Dependency Block Detected:
- My Task: [CURRENT_TASK_NAME]
- Cannot Proceed: [SPECIFIC_REASON]
- Blocked By: [REQUIRED_TASK_OR_COMPONENT]
- Responsible Agent: [AGENT_NAME/TYPE]
- Recommendation: "Switch to [AGENT] to complete [TASK] first"

Options:
1. Switch agents now (I'll prepare handoff context)
2. Skip this dependency (if acceptable)
3. Reassign my task to later phase

Which approach would you prefer?
```

### **Agent Handoff Preparation:**
**When preparing context for another agent:**
```
üìã Handoff Context for [TARGET_AGENT]:
- Previous Work: [SUMMARY_OF_COMPLETED]
- Current State: [FILES_MODIFIED_OR_ANALYZED]
- Blocking Issue: [SPECIFIC_DEPENDENCY]
- Required Action: [WHAT_NEEDS_TO_BE_DONE]
- Return Point: [WHERE_I_WILL_CONTINUE_AFTER]

Copy this context when switching to [TARGET_AGENT].
```

### **Cross-Agent Communication:**
- **Status Updates**: Always update shared checklist files
- **File Coordination**: Mark "IN_PROGRESS" in comments when editing
- **Conflict Prevention**: Check file locks before major changes

---

## üîÑ **WORKFLOW EXECUTION PATTERNS**

### **Pattern 1: Simple Direct Assignment**
```
Human: "Assign this task to GPT: Add debounced search"
GPT: Reads workflow ‚Üí Sees it's utility/optimization ‚Üí Executes immediately
```

### **Pattern 2: Smart Breakdown**
```
Human: "Create a multi-agent task for performance optimization"
Claude: Analyzes ‚Üí Creates phase breakdown ‚Üí Generates task files for each agent
```

### **Pattern 3: Auto-Routing**
```
Human: "Implement Chart.js memory cleanup"
Any Agent: Sees "cleanup" + "memory" ‚Üí Routes to Gemini specialization
```

---

## üö® **CRITICAL EFFICIENCY RULES**

### **Token Conservation**
- Use `@workspace` for context instead of large static files
- Break complex tasks into focused phases
- Agents only read task files relevant to their assignment
- Use handoff protocol for long conversations

### **Right Task, Right Agent**
- **Simple & Fast** ‚Üí GPT (reduces Claude context usage)
- **Testing & QA** ‚Üí Gemini (specialized strengths)
- **Complex & Architectural** ‚Üí Claude (best for deep analysis)

### **Parallel Execution**
- Independent phases run simultaneously
- Dependency chains clearly defined
- Progress tracked in shared checklist

---

## üìû **TRIGGER PHRASE LIBRARY**

### **Task Management**
```
"Create a multi-agent task for [TASK_NAME]"
"Assign this task to [AGENT]: [DESCRIPTION]"
"Review current task progress"
```

### **Roadmap Management**
```
"Add [ITEM] to Roadmap"
"Add [BUG] to Buglist" 
"Move [ITEM] to Current Sprint"
"Complete [ITEM]"
```

### **StackTrackr-Specific**
```
"Optimize performance for [FEATURE]"
"Add [COMPONENT] to StackTrackr"
"Debug issue: [DESCRIPTION]"
"Enhance [MODULE] functionality"
```

### **Quality & Testing**
```
"Create test suite for [FEATURE]"
"Security audit [MODULE]"
"Validate browser compatibility"
```

---

## üéØ **USAGE EXAMPLES**

### **Simple Task** (Direct Assignment):
```
Human: "Assign this task to GPT: Add localStorage batching for rapid edits"
GPT: Reads specialization ‚Üí Sees utility/optimization ‚Üí Implements immediately
```

### **Complex Task** (Smart Breakdown):
```
Human: "Create a multi-agent task for migrating to TypeScript"
Claude: Analyzes complexity ‚Üí Creates 6-phase plan ‚Üí Generates individual assignments
```

### **Auto-Routing**:
```
Human: "Need comprehensive testing for the new search feature"
Any Agent: Sees "testing" ‚Üí Routes to Gemini ‚Üí Creates test protocols
```

---

## üìä **SUCCESS METRICS**

### **Efficiency Gains**
- ‚úÖ Reduced token usage through smart routing
- ‚úÖ Faster task completion via specialization
- ‚úÖ Better quality through agent strengths
- ‚úÖ Seamless coordination via MCP

### **Quality Assurance**
- ‚úÖ All changes tested across 3 themes
- ‚úÖ Browser compatibility maintained
- ‚úÖ No breaking changes introduced
- ‚úÖ Performance improvements measured

---

## üîß **QUICK REFERENCE**

**Start Simple Task**: `"Assign this task to [AGENT]: [DESCRIPTION]"`  
**Start Complex Task**: `"Create a multi-agent task for [TASK_NAME]"`  
**Check Progress**: `"Review current task progress"`  
**Get Context**: Use `@workspace` command  
**Emergency Stop**: Refer to rollback procedures in task files

---

**This unified workflow optimizes for:**
‚úÖ **Token Efficiency** - Right agent, right task, minimal context  
‚úÖ **Quality Delivery** - Specialized strengths, proper testing  
‚úÖ **Seamless Coordination** - MCP integration, clear handoffs  
‚úÖ **Project Success** - StackTrackr-specific requirements met
‚úÖ **Enhanced Roadmap Management** - Categorized task tracking with simple commands

## üìã **NEW: Enhanced Roadmap System**

**All project tasks now organized in `/docs/roadmap.md` with categories:**
- üö® Critical Bugs (fix ASAP)
- üêõ Bug Fixes (non-critical) 
- üîß Feature Enhancements (improve existing)
- ‚≠ê New Features (add functionality)
- üèóÔ∏è Backend & Architecture (infrastructure)
- üß™ Testing & QA (quality assurance)
- üéØ Current Sprint (active work)

**Simple commands for any agent:**
- `"Add X to Roadmap"` - Auto-categorizes item
- `"Add Y to Buglist"` - Adds to bug sections
- `"Move X to Current Sprint"` - Makes item active
- `"Complete X"` - Archives completed item

**Replaces old backlog.md system with structured, agent-friendly task management.**
