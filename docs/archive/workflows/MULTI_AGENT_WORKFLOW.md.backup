# Multi-Agent Development Workflow - StackrTrackr v3.04.25


> **Latest release: v3.04.25**


## üéØ Project Overview

You are contributing to the **StackrTrackr v3.04.16**, a comprehensive client-side web application for tracking precious metal investments (Silver, Gold, Platinum, Palladium). The project uses a modular JavaScript architecture with local storage, responsive CSS theming, and advanced features like API integration, data visualization, and comprehensive import/export capabilities.

**Current Status**: v3.04.18 (beta)
**Your Role**: Complete focused v3.04.x patch tasks as part of a coordinated multi-agent development effort

---

## üèóÔ∏è Multi-Agent Workflow

### **How This Works**
- Development progresses through incremental **v3.04.x patch releases**
- Each patch entry is designed for **~2 hour completion**
- **Multiple agents work in parallel** on different patch entries
- **Coordination system** prevents conflicts and ensures quality
- **Roadmap entries** track progress and assignments

### **Your Responsibilities**
1. **Pick up an available patch entry** from the roadmap
2. **Check dependencies or prerequisites** before starting work
3. **Complete the patch** following quality standards
4. **Test your changes** thoroughly
5. **Bump the version and update all docs** after completing the patch
6. **Document your work** and any findings
7. **Mark the patch entry as complete** in the roadmap

---

## üìã How to Get Started

### **Step 1: Read the Documentation**
Before starting any patch entry, read these files:
- `docs/roadmap.md` - Patch release roadmap (v3.03.x entries)
- `docs/archive/notes/v3.2.0-planning-notes.md` - Technical implementation details
- `docs/status.md` - Current project status
- `docs/structure.md` - Project architecture and file organization
- `docs/ui_style_guide.md` - UI color, typography, and component conventions
- `docs/functionstable.md` - Reference table of all JavaScript functions

### **Step 2: Choose Your Patch Entry**
1. **Review available patch entries** in `docs/roadmap.md`
2. **Check dependencies** ‚Äì some patches require others to complete first
3. **Verify file conflicts** ‚Äì avoid working on high-conflict files simultaneously
4. **Announce your choice** if coordinating with other agents

### **Step 3: Understand the Context**
- **Read the current codebase** in the relevant files
- **Understand existing patterns** and architecture
- **Review related patches** to understand the bigger picture
- **Check for any existing work** that might affect your patch

---

## üéØ Patch Execution Guidelines

### **Quality Standards (Required for Every Patch)**

#### ‚úÖ **Functional Testing**
- Verify your changes work as intended
- Test with both empty and populated data
- Check all user interaction scenarios
- Verify mobile and desktop responsiveness

#### ‚úÖ **Integration Testing**  
- Ensure no breaking changes to existing features
- Test spot price calculations, inventory management, search, etc.
- Verify import/export functionality still works
- Check theme switching and modal behavior

#### ‚úÖ **Code Quality**
- Follow existing code patterns and conventions
- Use consistent naming and formatting
- Add JSDoc comments for new functions
- Keep functions focused and modular

#### ‚úÖ **Browser Compatibility**
- Test in Chrome, Firefox, Safari, Edge
- Verify file:// protocol compatibility (open index.html directly)
- Check mobile browsers if making UI changes
- Test with localStorage enabled/disabled

#### ‚úÖ **Documentation Updates**
- Update relevant code comments
- Add any new configuration to constants.js
- Update planning notes if you discover issues
- Document any architectural decisions
- For every completed patch, **bump the version** and update:
  - `docs/functionstable.md`
  - `docs/changelog.md`
  - `docs/implementation_summary.md`
  - `docs/roadmap.md`
  - `docs/status.md`
  - `docs/structure.md`

### **File Modification Guidelines**

#### **HIGH CONFLICT RISK FILES** ‚ö†Ô∏è (Coordinate Carefully)
- `index.html` - Frequently modified
- `events.js` - Central event handler logic
- `css/styles.css` - Shared styling

**When working on these files:**
- Check with other agents working nearby patches
- Make focused, minimal changes
- Test thoroughly for conflicts
- Document exactly what you changed

#### **MEDIUM CONFLICT RISK FILES** ‚ö†Ô∏è
- `api.js` - API integration logic
- `inventory.js` - Core data management

#### **LOW CONFLICT RISK FILES** ‚úÖ (Safe for Parallel Work)
- Documentation files (.md)
- Individual modal HTML/CSS sections
- Utility functions
- New feature modules

---

## üìù Patch Completion Checklist

### **Before You Start:**
- [ ] Read all relevant documentation
- [ ] Understand the patch requirements
- [ ] Check dependencies are met
- [ ] Verify no file conflicts with other agents
- [ ] Review related code sections

### **During Development:**
- [ ] Follow existing code patterns
- [ ] Make focused, minimal changes
- [ ] Test incrementally as you work
- [ ] Document any issues or discoveries
- [ ] Keep changes organized and clean

### **Before Submitting:**
- [ ] **Functional testing** - Does it work as intended?
- [ ] **Integration testing** - Did you break anything?
- [ ] **Code quality** - Clean, documented, consistent?
- [ ] **Browser testing** - Works across major browsers?
- [ ] **Documentation** - Updated relevant docs/comments?
- [ ] **File cleanup** - Removed debug code, organized changes?

### **After Completion:**
- [ ] Bump the version and update all docs
- [ ] Mark the patch entry as complete in the roadmap
- [ ] Document any findings that affect other patches
- [ ] Note any changes to original requirements
- [ ] Archive the previous build in `/archive/v_previous` and ensure its `index.html` footer links back to `/`

---

## üõ†Ô∏è Technical Context

### **Current Architecture:**
- **Client-side only** - No server dependencies
- **Modular JavaScript** - Separate files for different concerns
- **Local storage** - All data persisted locally
- **Responsive CSS** - Mobile-first design with dark/light themes
- **External libraries** - Chart.js, Papa Parse, XLSX, jsPDF, JSZip

### **Key Data Structures:**
- **`inventory`** - Array of inventory items with all metadata
- **`spotPrices`** - Current spot prices for all metals  
- **`spotHistory`** - Historical price tracking
- **`apiConfig`** - API provider configuration
- **`elements`** - Cached DOM elements for performance

### **Important Constants:**
- **`APP_VERSION`** - Current version (in `constants.js`)
- **`METALS`** - Metal configuration object
- **Storage keys** - LocalStorage key constants
- **API providers** - Configuration for supported APIs

---

## üîç Debugging and Testing

### **Testing Your Changes:**
1. **Open `index.html`** directly in browser (file:// protocol)
2. **Import sample data** using `sample.csv`
3. **Test core workflows** - add items, edit, search, export
4. **Try edge cases** - empty data, large datasets, invalid inputs
5. **Check responsive design** - Mobile and desktop views
6. **Test theme switching** - Dark and light modes

### **Common Issues to Watch For:**
- **LocalStorage quota** - Large inventories might hit limits
- **Date parsing** - Multiple date formats need handling
- **XSS prevention** - All user input must be sanitized
- **Mobile compatibility** - Touch events, small screens
- **File protocol** - Some features work differently from file://

### **Performance Considerations:**
- **Large inventories** - Pagination and virtualization
- **Chart rendering** - Canvas performance with many data points
- **ZIP processing** - Progress indicators for large files
- **Search filtering** - Debouncing for large datasets

---

## üìû Communication Protocols

### **When to Coordinate:**
- Working on HIGH CONFLICT RISK files
- Discovering issues that affect other patches
- Finding bugs or architectural problems
- Needing to modify shared components

### **What to Document:**
- Any deviations from original patch requirements
- Performance issues discovered
- Browser compatibility problems
- Dependencies that weren't anticipated
- Suggestions for future improvements

### **How to Report Issues:**
- Update planning notes with technical discoveries
- Document workarounds for browser issues  
- Note any security considerations
- Flag breaking changes or API modifications

---

## ‚ö° Quick Reference

### **Essential Files:**
- `docs/roadmap.md` - Patch release list
- `docs/archive/notes/v3.2.0-planning-notes.md` - Implementation details
- `docs/functionstable.md`